.container-fluid.py-4.px-3
  .d-flex.justify-content-between.align-items-center.mb-3
    h3.mb-0 メニュー一覧
    = link_to new_menu_path, class: "btn btn-primary" do
      i.bi.bi-plus-circle.me-1
      | 新規登録

  .card.shadow-sm.mb-3
    .card-body.py-2.px-3
      = form_with url: menus_path, method: :get, local: true do |f|
        .row.g-2
          .col-md-5
            .input-group
              span.input-group-text.py-1
                i.bi.bi-search
              = f.text_field :query, value: params[:query], class: "form-control", placeholder: "メニュー名で検索...", autocomplete: "off"
          .col-md-3
            = f.select :category, options_for_select([["すべてのカテゴリ", ""]] + Menu.categories.keys.map { |c| [c, c] }, params[:category]), {}, class: "form-select"
          .col-md-4.text-end
            = f.submit "検索", class: "btn btn-primary btn-sm me-2"
            - if params[:query].present? || params[:category].present?
              = link_to "クリア", menus_path, class: "btn btn-outline-secondary btn-sm"

  .table-responsive
    table.table.table-hover.table-bordered.mb-0
      thead.table-light
        tr
          th.text-center style="width: 60px;"
          th.text-center style="width: 50px;" 画像
          th メニュー名
          th.text-center カテゴリ
          th.text-end 原価
          th.text-center 材料数
          th.text-center 栄養情報
          th.text-center 工程
      tbody
        - @menus.each do |menu|
          tr.js-menu-item
            td.text-center
              .btn-group role="group"
                = link_to menu_path(menu), class: "btn btn-sm btn-outline-primary", title: "詳細" do
                  i.bi.bi-eye
                = link_to edit_menu_path(menu), class: "btn btn-sm btn-outline-secondary", title: "編集" do
                  i.bi.bi-pencil
            td.text-center
              - if menu.image.attached?
                = image_tag menu.image.variant(resize_to_limit: [30, 30]), class: "menu-thumbnail", style: "height: 30px; width: 30px; object-fit: cover; cursor: pointer;", data: { bs_toggle: "modal", bs_target: "#menuImageModal", image_url: url_for(menu.image), menu_name: menu.name }
            td
              .fw-bold = menu.name
            td.text-center
              span.badge.rounded-pill class=menu_category_badge_class(menu.category_i18n) = menu.category_i18n
            td.text-end
              = number_to_currency(menu.cost_price, unit: "円")
            td.text-center
              span.badge.bg-secondary = menu.menu_materials_count
            td.text-center
              small
                span.me-2
                  | Ca:
                  strong = "#{menu.calorie}kcal"
                span
                  | Sa:
                  strong = "#{menu.salt}g"
            td.text-center
              - if menu.cook_before.present? || menu.cook_on_the_day.present?
                - if menu.cook_before.present?
                  span.badge.bg-warning.text-dark.me-1 前日
                - if menu.cook_on_the_day.present?
                  span.badge.bg-success 当日
              - else
                span.text-muted なし

  .d-flex.justify-content-between.align-items-center.mt-2
    small.text-muted 全 #{@menus.count} 件
    = will_paginate @menus, renderer: WillPaginate::ActionView::BootstrapLinkRenderer if @menus.respond_to?(:total_pages)

/ 画像拡大表示用モーダル
#menuImageModal.modal.fade tabindex="-1" aria-labelledby="menuImageModalLabel" aria-hidden="true"
  .modal-dialog.modal-lg.modal-dialog-centered
    .modal-content
      .modal-header
        h5#menuImageModalLabel.modal-title メニュー画像
        button.btn-close type="button" data-bs-dismiss="modal" aria-label="閉じる"
      .modal-body.text-center
        img#modalMenuImage.img-fluid style="max-height: 600px;"

javascript:
  // Turbo対応のイベントリスナー設定
  function setupMenuImageModal() {
    // サムネイル画像クリック時の処理
    document.querySelectorAll('.menu-thumbnail').forEach(function(thumbnail) {
      // 既存のイベントリスナーを削除して重複を防ぐ
      const newThumbnail = thumbnail.cloneNode(true);
      thumbnail.parentNode.replaceChild(newThumbnail, thumbnail);

      newThumbnail.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        const imageUrl = this.getAttribute('data-image-url');
        const menuName = this.getAttribute('data-menu-name');

        // モーダル内の画像とタイトルを更新
        const modalImage = document.getElementById('modalMenuImage');
        const modalLabel = document.getElementById('menuImageModalLabel');

        if (modalImage && modalLabel) {
          modalImage.src = imageUrl;
          modalLabel.textContent = menuName + ' - メニュー画像';
        }
      });
    });
  }

  // DOMContentLoadedとturbo:loadの両方に対応
  document.addEventListener('DOMContentLoaded', setupMenuImageModal);
  document.addEventListener('turbo:load', setupMenuImageModal);

css:
  .menu-thumbnail {
    border-radius: 4px;
    transition: transform 0.2s;
  }

  .menu-thumbnail:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }