.container-fluid.py-4.px-3
  .d-flex.justify-content-between.align-items-center.mb-3
    h3.mb-0 商品一覧
    = link_to new_product_path, class: "btn btn-primary" do
      i.bi.bi-plus-circle.me-1
      | 新規登録
  .card.shadow-sm.mb-3
    .card-body.py-2.px-3
      = form_with url: products_path, method: :get, local: true do |f|
        .row.g-2
          .col-md-6
            .input-group
              span.input-group-text.py-1
                i.bi.bi-search
              = f.text_field :query, value: params[:query], class: "form-control", placeholder: "商品名で検索...", autocomplete: "off"
          .col-md-4
            = f.select :category, options_for_select([["すべてのカテゴリ", ""]] + Product.categories.keys.map { |c| [Product.categories_i18n[c], c] }, params[:category]), {}, class: "form-select"
          .col-md-2.text-end.mt-2
            = f.submit "検索", class: "btn btn-primary btn-sm me-2"
            - if params[:query].present? || params[:category].present?
              = link_to "クリア", products_path, class: "btn btn-outline-secondary btn-sm"
  .table-responsive
    table.table.table-hover.table-bordered.mb-0
      thead.table-light
        tr
          th.text-center style="width: 60px;"
          th style="width: 50px;" 画像
          th 商品名
          th 食品表示名称
          th.text-center カテゴリ
          th.text-center 容器
          th.text-end 売価
          th.text-end 原価
          th.text-end 原価率
          th.text-center メニュー数
          th.text-center ステータス
      tbody
        - @products.each do |product|
          - cost_ratio = product.sell_price.to_f > 0 ? ((product.cost_price / product.sell_price) * 100).round(1) : 0
          tr.js-product-item
            td.text-center
              = link_to edit_product_path(product), class: "btn btn-sm btn-outline-primary" do
                i.bi.bi-pencil-square
            td.text-center
              - if product.image.attached?
                = image_tag product.image.variant(resize_to_limit: [40, 40]), class: "product-thumbnail", style: "cursor: pointer;", data: { bs_toggle: "modal", bs_target: "#imageModal", image_url: url_for(product.image), product_name: product.name }
              - else
                / span.text-muted
                /   i.bi.bi-image style="font-size: 1.5rem;"
            td
              .fw-bold = product.name
              small.text-muted = truncate(product.introduction, length: 40)
            td = product.food_label_name
            td.text-center
              span.badge.rounded-pill.bg-info.text-dark = product.category_i18n
            td.text-center
              - if product.container
                span.badge.rounded-pill.bg-info.text-dark = product.container.name
              - else
                span.text-muted --
            td.text-end = number_to_currency(product.sell_price, unit: "¥")
            td.text-end = number_to_currency(product.cost_price, unit: "¥")
            td.text-end
              span class="#{cost_ratio <= 30 ? 'text-success' : cost_ratio <= 40 ? 'text-warning' : 'text-danger'}"
                = "#{cost_ratio}%"
            td.text-center
              span.badge.bg-secondary = product.product_menus_count
            td.text-center
              - if product.unused_flag?
                span.badge.bg-secondary 停止中
              - else
                span.badge.bg-success 使用中

  .d-flex.justify-content-between.align-items-center.mt-2
    small.text-muted 全 #{@products.count} 件
    = will_paginate @products, renderer: WillPaginate::ActionView::BootstrapLinkRenderer if @products.respond_to?(:total_pages)

/ 画像拡大表示用モーダル
#imageModal.modal.fade tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true"
  .modal-dialog.modal-lg.modal-dialog-centered
    .modal-content
      .modal-header
        h5#imageModalLabel.modal-title 商品画像
        button.btn-close type="button" data-bs-dismiss="modal" aria-label="閉じる"
      .modal-body.text-center
        img#modalImage.img-fluid style="max-height: 600px;"

javascript:
  document.addEventListener('DOMContentLoaded', function() {
    // サムネイル画像クリック時の処理
    document.querySelectorAll('.product-thumbnail').forEach(function(thumbnail) {
      thumbnail.addEventListener('click', function() {
        const imageUrl = this.getAttribute('data-image-url');
        const productName = this.getAttribute('data-product-name');
        
        // モーダル内の画像とタイトルを更新
        document.getElementById('modalImage').src = imageUrl;
        document.getElementById('imageModalLabel').textContent = productName + ' - 商品画像';
      });
    });
  });

css:
  .product-thumbnail {
    border-radius: 4px;
    transition: transform 0.2s;
  }
  
  .product-thumbnail:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }